# Mockly Frontend Documentation

## Project Overview

**Mockly** is an AI-powered mock interview application that provides real-time feedback on interview performance. The system analyzes both verbal content and non-verbal cues (voice and facial expressions) to give comprehensive feedback to users practicing for job interviews.

The frontend is a React.js application that provides an intuitive, professional interface for conducting mock interviews. It captures video and audio in real-time, processes speech into transcripts, and displays comprehensive feedback with actionable insights including AI-powered STAR method analysis.

## Architecture Overview

Mockly follows a client-server architecture where:
- **Frontend**: React.js application running on port 3000
- **Backend**: FastAPI server running on port 8000 (handles AI analysis and scoring)
- **Communication**: RESTful API calls between frontend and backend
- **AI Integration**: Mistral-7B-Instruct-v0.2 for content scoring and STAR analysis

## Frontend Technology Stack

- **React 18**: Modern React with hooks for state management
- **Web Speech API**: Real-time speech recognition for transcript generation
- **MediaDevices API**: Camera and microphone access for video/audio capture
- **CSS3**: Custom styling with CSS variables and modern design patterns
- **Fetch API**: HTTP client for backend communication
- **Grid CSS**: Responsive layout for STAR analysis display

## Project Structure

```
src/
├── components/
│   ├── App.js                    # Main application component
│   ├── InterviewSession.js       # Interview flow management
│   ├── FeedbackReport.js         # Feedback display component
│   └── VideoAudioProcessor.js    # Media capture and processing
├── utils/
│   └── interviewUtils.js         # Common utilities and helpers
├── constants/
│   └── interviewConstants.js     # Centralized constants and configuration
├── theme.css                     # Design system and styling
└── config.js                     # Application configuration
```

## Core Components

### 1. Main App (`src/App.js`)
**Purpose**: Application root component with state management and routing logic

**Key Features**:
- Manages application state using enum-like constants
- Handles interview flow transitions between states
- Responsive container with dynamic sizing based on session state
- Smooth transitions between interview and feedback views
- Professional card-based layout with glass morphism effects
- Reset functionality for new interview sessions

**State Management**:
- `interviewReport`: Stores interview feedback data from backend
- `currentState`: Tracks application state (initial, interviewing, feedback)
- Uses `APP_STATES` constants for clear state management

**State Flow**:
- `INITIAL`: Welcome screen with start button
- `INTERVIEWING`: Active interview session
- `FEEDBACK`: Results display with STAR analysis

### 2. Interview Session (`src/components/InterviewSession.js`)
**Purpose**: Manages the interview flow and API communication

**Key Features**:
- Start/stop interview controls with user-friendly interface
- API integration with comprehensive analysis endpoint
- Handles completion callback with metrics and transcript data
- Integrates seamlessly with VideoAudioProcessor component
- Robust error handling with fallback mechanisms
- Support for both comprehensive and basic scoring endpoints
- Development mode support with mock data

**API Integration**:
- **Primary**: POST request to `/comprehensive-analysis`
- **Fallback**: POST request to `/score-session`
- Sends metrics and transcript data
- Receives comprehensive scoring feedback with STAR analysis
- Error handling with graceful degradation

**API Service Class**:
- `InterviewApiService`: Encapsulates API communication logic
- Centralized error handling and request management
- Clean separation of concerns

**Error Handling**:
- Comprehensive analysis failure fallback to basic scoring
- Network error handling with user feedback
- Default response generation for complete failure scenarios
- Development mode detection and mock data usage

### 3. Video Audio Processor (`src/components/VideoAudioProcessor.js`)
**Purpose**: Core interview recording and processing component

**Key Features**:
- Real-time video capture using MediaDevices API
- Live speech recognition using Web Speech API
- 10-second automatic session duration (configurable)
- Live transcript display with animated listening indicator
- Mock metrics generation (voice: 3.5, face: 4.2)
- Automatic cleanup of media streams and resources
- Error handling for unsupported browser features
- Development mode transcript simulation

**Technical Implementation**:
- Uses `useRef` for video element and transcript storage
- Implements `useEffect` for lifecycle management
- Animated dots indicator for user feedback
- Speech recognition with continuous mode and interim results
- Processing screen with loading animation
- Fallback timeout to prevent stuck states

**Utility Integration**:
- `TranscriptValidator`: Transcript validation and formatting
- `MediaStreamUtils`: Media stream operations
- `SpeechRecognitionUtils`: Speech recognition operations
- `TimeoutManager`: Timeout and interval management
- `ErrorHandler`: Centralized error handling

**Transcript Simulation**:
- Development mode transcript simulation for testing
- Configurable sentence intervals and interim text display
- Automatic cleanup and state management

### 4. Feedback Report (`src/components/FeedbackReport.js`)
**Purpose**: Displays comprehensive interview feedback with actionable insights

**Key Features**:
- Color-coded score display based on performance thresholds
- Organized tips section with categorized improvement advice
- Debug transcript display for development and verification
- Responsive design with visual feedback indicators
- Professional presentation of scoring data
- STAR Method Analysis display with categorized breakdown
- Interactive STAR component grid layout
- Color-coded STAR categories for visual distinction

**Scoring Visualization**:
- Green: Score ≥ 4.0 (Excellent)
- Yellow: Score ≥ 3.0 (Good)
- Red: Score < 3.0 (Needs Improvement)

**STAR Analysis Display**:
- **Situation**: Green (#3BA676) - Context and background information
- **Task**: Yellow (#FACC15) - Objectives and requirements
- **Action**: Red (#EF4444) - Specific actions and approaches
- **Result**: Purple (#8B5CF6) - Outcomes and impact
- Responsive grid layout with hover effects
- Empty state handling for missing STAR components

**Data Access Patterns**:
- `StarDataAccessor`: Consistent data handling for STAR analysis
- `ScoreEvaluator`: Centralized score evaluation logic

## Utility System

### Interview Utilities (`src/utils/interviewUtils.js`)
**Purpose**: Common functions and constants used across interview components

**Key Utilities**:
- `ScoreEvaluator`: Consistent score evaluation and classification
- `TranscriptValidator`: Transcript validation and formatting
- `ErrorHandler`: Centralized error handling
- `TimeoutManager`: Timeout and interval management
- `MediaStreamUtils`: Media stream operations
- `SpeechRecognitionUtils`: Speech recognition operations

**Benefits**:
- Eliminates code duplication
- Provides consistent patterns across components
- Improves testability and maintainability
- Centralizes common functionality

### Constants System (`src/constants/interviewConstants.js`)
**Purpose**: Centralized configuration values for the interview system

**Configuration Categories**:
- `INTERVIEW_CONFIG`: Session configuration
- `AUDIO_CONSTRAINTS`: Audio quality settings
- `SPEECH_CONFIG`: Speech recognition settings
- `STAR_COMPONENTS`: STAR analysis configuration
- `APP_STATES`: Application state constants
- `CSS_CLASSES`: CSS class name constants
- `ERROR_MESSAGES`: Error message constants
- `UI_TEXT`: User interface text constants

**Benefits**:
- Single source of truth for configuration
- Easy maintenance and updates
- Consistent naming across the application
- Clear separation of concerns

## Styling and Design System (`src/theme.css`)

### Design Philosophy
Modern, professional interview-focused aesthetic with accessibility and usability in mind.

### Design System Structure
**CSS Custom Properties**:
- **Border Radius**: Base, small, and large variants
- **Color Palette**: Primary, neutral, and semantic colors
- **Shadows**: Small, medium, and large shadow variants
- **Typography Scale**: Small, base, large, and extra-large
- **Spacing Scale**: Small, medium, large, and extra-large
- **Transitions**: Fast, normal, and slow timing
- **Layout Constants**: Video and transcript configuration

### Color Palette
- **Primary**: Mint/sage theme (#3BA676, #EAF7F1, #acd5ca, #205E4A)
- **Neutrals**: Rich graphite (#1A1A1A), muted gray (#6B7280)
- **Semantic Colors**: Success (#3BA676), Warning (#FACC15), Error (#EF4444)
- **STAR Colors**: Situation (#3BA676), Task (#FACC15), Action (#EF4444), Result (#8B5CF6)

### Component Organization
**Base Styles**: Foundation typography and body styles
**Layout Components**: Structure and positioning
**Interactive Elements**: Buttons and controls
**Feedback Components**: Scores and tips
**STAR Analysis Components**: Interview feedback display
**Media Components**: Video and transcript
**Processing Screen**: Loading states
**Animations**: Keyframes and transitions
**Responsive Design**: Media queries for different screen sizes
**Utility Classes**: Helper styles

### Key Design Features
- **CSS Custom Properties**: Consistent theming across components
- **Glass Morphism**: Backdrop blur effects for modern appearance
- **Responsive Design**: Clamp() functions for fluid typography and spacing
- **Smooth Animations**: Transitions and hover effects for better UX
- **Professional Layout**: Card-based design with elevated shadows
- **CSS Grid**: Responsive layout for STAR analysis display
- **Hover Effects**: Interactive feedback for user engagement

## User Experience Flow

### 1. Initial State
- Clean, centered interface with project title
- Clear call-to-action button to start interview
- Professional mint/sage color scheme
- Development mode indicators when applicable

### 2. Interview Session
- Video preview with live camera feed
- Real-time transcript display with listening indicator
- 10-second automatic session duration
- Seamless transition to processing screen
- Development mode transcript simulation support

### 3. Processing Screen
- Professional loading animation
- Clear messaging about AI analysis
- Automatic transition to feedback view
- Fallback timeout to prevent stuck states

### 4. Feedback Display
- Comprehensive scoring across three dimensions
- Color-coded performance indicators
- Actionable improvement tips
- Debug transcript for verification
- STAR Method Analysis with categorized breakdown
- Visual STAR component grid with color coding
- Reset button for new interview sessions

## Technical Implementation Details

### State Management
- React hooks for local state management
- Props for component communication
- Enum-like state constants for clarity
- No external state management library required

### API Communication
- **Primary**: Comprehensive analysis endpoint for combined scoring and STAR
- **Fallback**: Basic scoring endpoint for error recovery
- JSON data format for request/response
- Error handling with graceful degradation
- Service class pattern for API operations

### Browser Compatibility
- Modern browser support required
- Web Speech API dependency
- MediaDevices API for camera/microphone
- Fallback handling for unsupported features
- CSS Grid support for responsive layouts

### Development Features
- Environment-based configuration
- Mock data support for development
- Transcript simulation for testing
- Comprehensive error logging
- Development mode indicators

## Code Quality Standards

### Clean Code Principles
- **Meaningful Names**: Descriptive variable and function names
- **Single Responsibility**: Each component has one clear purpose
- **DRY Principle**: No code duplication, centralized utilities
- **Simplified Control Flow**: Clear, readable logic
- **Pure Functions**: Utility functions with clear inputs/outputs
- **Testable Structure**: Modular design for easy testing

### File Organization
- **Components**: Focused, single-purpose React components
- **Utilities**: Reusable helper functions
- **Constants**: Centralized configuration
- **Styles**: Organized design system
- **Configuration**: Environment-specific settings

### Documentation
- Comprehensive component documentation
- Clear code comments and structure
- Design system documentation
- API integration guides
- Development workflow documentation

## Development Setup

### Prerequisites
- Node.js and npm installed
- Modern browser with Web Speech API support
- Backend server running on port 8000 with Mistral AI integration

### Installation and Running
```bash
cd mockly-frontend
npm install
npm start
```

### Development Features
- Hot reloading with React Scripts
- Development server on port 3000
- Browser developer tools integration
- Debug transcript display for testing
- **PRODUCTION READY**: Clean console output for deployment

## Current Limitations and Future Enhancements

### Current Limitations
- **UPDATED**: Fixed 10-second session duration (increased from 5 seconds)
- Browser-dependent speech recognition
- Mock metrics for voice and face analysis
- Basic error handling
- **UPDATED**: Now includes real AI-powered content scoring and STAR analysis

### Planned Improvements
- Customizable session duration
- Enhanced speech recognition accuracy
- Real-time facial expression analysis
- Session recording and playback
- Multiple interview scenarios
- User authentication and progress tracking
- Advanced analytics dashboard
- Mobile-responsive design improvements
- **NEW**: STAR analysis export functionality
- **NEW**: Historical STAR performance tracking
- **NEW**: Customizable STAR evaluation criteria

## API Integration Details

### Comprehensive Analysis Endpoint
- **URL**: `POST /comprehensive-analysis`
- **Request**: `{ metrics, transcript }`
- **Response**: `{ content_score, voice_score, face_score, tips, transcript_debug, star_analysis }`
- **Features**: Combined scoring and STAR analysis in single request

### STAR Analysis Data Structure
```javascript
{
  star_analysis: {
    situation: ["Context sentences..."],
    task: ["Objective sentences..."],
    action: ["Action sentences..."],
    result: ["Outcome sentences..."]
  }
}
```

### Error Handling Strategy
1. **Primary**: Comprehensive analysis endpoint
2. **Fallback**: Basic scoring endpoint
3. **Final**: Default response with error message
4. **PRODUCTION READY**: Minimal console logging for critical errors only

## File Structure
```
mockly-frontend/
├── src/
│   ├── App.js              # Main React component
│   ├── index.js            # React entry point
│   ├── components/         # React components
│   │   ├── InterviewSession.js    # Updated with comprehensive API
│   │   ├── VideoAudioProcessor.js # Core recording component (10s duration)
│   │   └── FeedbackReport.js      # Enhanced with STAR display
│   └── theme.css           # Updated styling with STAR components
├── public/
│   └── index.html          # HTML template
├── package.json            # Dependencies and scripts
└── README.md              # Setup instructions
```

## Production Deployment Notes

### Code Quality
- **CLEANED**: Removed all unnecessary console.log statements
- **OPTIMIZED**: Only essential error logging preserved
- **READY**: Code is production-ready for mainline deployment

### Performance Optimizations
- Minimal console overhead
- Efficient resource cleanup
- Optimized re-rendering
- Streamlined API communication

### Error Logging Strategy
- **Speech Recognition Errors**: Critical for debugging audio issues
- **Media Capture Errors**: Essential for camera/microphone problems
- **API Communication Errors**: Important for backend connectivity
- **Fallback Errors**: Critical for system reliability

This documentation provides comprehensive coverage of the updated Mockly frontend with STAR analysis integration, enhanced API communication, improved user experience, and production-ready code quality. 