# Mockly Frontend Documentation

## Project Overview

**Mockly** is an AI-powered mock interview application that provides real-time feedback on interview performance. The system analyzes both verbal content and non-verbal cues (voice and facial expressions) to give comprehensive feedback to users practicing for job interviews.

The frontend is a React.js application that provides an intuitive, professional interface for conducting mock interviews. It captures video and audio in real-time, processes speech into transcripts, and displays comprehensive feedback with actionable insights including AI-powered STAR method analysis.

## Architecture Overview

Mockly follows a client-server architecture where:
- **Frontend**: React.js application running on port 3000
- **Backend**: FastAPI server running on port 8000 (handles AI analysis and scoring)
- **Communication**: RESTful API calls between frontend and backend
- **AI Integration**: Mistral-7B-Instruct-v0.2 for content scoring and STAR analysis

## Frontend Technology Stack

- **React 18**: Modern React with hooks for state management
- **Web Speech API**: Real-time speech recognition for transcript generation
- **MediaDevices API**: Camera and microphone access for video/audio capture
- **CSS3**: Custom styling with CSS variables and modern design patterns
- **Fetch API**: HTTP client for backend communication
- **Grid CSS**: Responsive layout for STAR analysis display

## Core Components

### 1. Main App (`src/App.js`)
**Purpose**: Application root component with state management and routing logic

**Key Features**:
- Manages interview session state (started/completed)
- Handles report display logic and conditional rendering
- Responsive container with dynamic sizing based on session state
- Smooth transitions between interview and feedback views
- Professional card-based layout with glass morphism effects
- Reset functionality for new interview sessions

**State Management**:
- `report`: Stores interview feedback data from backend (including STAR analysis)
- `interviewStarted`: Tracks whether interview is in progress

### 2. Interview Session (`src/components/InterviewSession.js`)
**Purpose**: Manages the interview flow and API communication

**Key Features**:
- Start/stop interview controls with user-friendly interface
- **UPDATED**: API integration with comprehensive analysis endpoint (`/comprehensive-analysis`)
- Handles completion callback with metrics and transcript data
- Integrates seamlessly with VideoAudioProcessor component
- **NEW**: Robust error handling with fallback mechanisms
- **NEW**: Support for both comprehensive and basic scoring endpoints

**API Integration**:
- **Primary**: POST request to `http://127.0.0.1:8000/comprehensive-analysis`
- **Fallback**: POST request to `http://127.0.0.1:8000/score-session`
- Sends metrics and transcript data
- Receives comprehensive scoring feedback with STAR analysis
- **NEW**: Error handling with graceful degradation

**Error Handling**:
- Comprehensive analysis failure fallback to basic scoring
- Network error handling with user feedback
- Default response generation for complete failure scenarios
- **PRODUCTION READY**: Minimal console logging for critical errors only

### 3. Video Audio Processor (`src/components/VideoAudioProcessor.js`)
**Purpose**: Core interview recording and processing component

**Key Features**:
- Real-time video capture using MediaDevices API
- Live speech recognition using Web Speech API
- **UPDATED**: 10-second automatic session duration (configurable)
- Live transcript display with animated listening indicator
- Mock metrics generation (voice: 3.5, face: 4.2)
- Automatic cleanup of media streams and resources
- Error handling for unsupported browser features
- **PRODUCTION READY**: Clean console logging with only essential error reporting

**Technical Implementation**:
- Uses `useRef` for video element and transcript storage
- Implements `useEffect` for lifecycle management
- Animated dots indicator for user feedback
- Speech recognition with continuous mode and interim results
- **NEW**: Processing screen with loading animation
- **NEW**: Fallback timeout to prevent stuck states

### 4. Feedback Report (`src/components/FeedbackReport.js`)
**Purpose**: Displays comprehensive interview feedback with actionable insights

**Key Features**:
- Color-coded score display (green/yellow/red based on performance thresholds)
- Organized tips section with categorized improvement advice
- Debug transcript display for development and verification
- Responsive design with visual feedback indicators
- Professional presentation of scoring data
- **NEW**: STAR Method Analysis display with categorized breakdown
- **NEW**: Interactive STAR component grid layout
- **NEW**: Color-coded STAR categories for visual distinction
- **PRODUCTION READY**: Clean console logging with only essential error reporting

**Scoring Visualization**:
- Green: Score ≥ 4.0 (Excellent)
- Yellow: Score ≥ 3.0 (Good)
- Red: Score < 3.0 (Needs Improvement)

**STAR Analysis Display**:
- **Situation**: Green (#3BA676) - Context and background information
- **Task**: Yellow (#FACC15) - Objectives and requirements
- **Action**: Red (#EF4444) - Specific actions and approaches
- **Result**: Purple (#8B5CF6) - Outcomes and impact
- Responsive grid layout with hover effects
- Empty state handling for missing STAR components

## Styling and Design System (`src/theme.css`)

### Design Philosophy
Modern, professional interview-focused aesthetic with accessibility and usability in mind.

### Color Palette
- **Primary**: Mint/sage theme (#3BA676, #EAF7F1, #acd5ca, #205E4A)
- **Neutrals**: Rich graphite (#1A1A1A), muted gray (#6B7280)
- **Feedback Colors**: Success (#3BA676), Warning (#FACC15), Danger (#EF4444)
- **NEW**: STAR Colors - Situation (#3BA676), Task (#FACC15), Action (#EF4444), Result (#8B5CF6)

### Key Design Features
- **CSS Custom Properties**: Consistent theming across components
- **Glass Morphism**: Backdrop blur effects for modern appearance
- **Responsive Design**: Clamp() functions for fluid typography and spacing
- **Smooth Animations**: Transitions and hover effects for better UX
- **Professional Layout**: Card-based design with elevated shadows
- **NEW**: CSS Grid for STAR analysis layout
- **NEW**: Hover effects for interactive STAR components

### Component-Specific Styling
- **Mockly Container**: Responsive centering with dynamic sizing
- **Mockly Card**: Glass effect with backdrop blur and shadows
- **Mockly Button**: Interactive states with hover and active feedback
- **Score Tags**: Color-coded performance indicators
- **Video Box**: 16:9 aspect ratio with rounded corners
- **Transcript Box**: Monospace font for readability
- **NEW**: STAR Analysis Section - Glass morphism with border accent
- **NEW**: STAR Grid - Responsive grid layout with auto-fit columns
- **NEW**: STAR Components - Individual cards with color-coded borders
- **NEW**: STAR Content - Typography and spacing for readability
- **NEW**: Processing Screen - Loading animation with professional styling

### STAR Analysis Styling
- **Grid Layout**: Auto-fit responsive grid with minimum 250px columns
- **Component Cards**: White background with subtle shadows and hover effects
- **Color Coding**: Left border accent matching STAR category colors
- **Typography**: Uppercase headers with letter spacing for professional appearance
- **Responsive**: Single column layout on mobile devices
- **Hover Effects**: Subtle lift animation with enhanced shadows

## User Experience Flow

### 1. Initial State
- Clean, centered interface with project title
- Clear call-to-action button to start interview
- Professional mint/sage color scheme

### 2. Interview Session
- Video preview with live camera feed
- Real-time transcript display with listening indicator
- **UPDATED**: 10-second automatic session duration
- Seamless transition to processing screen

### 3. Processing Screen
- **NEW**: Professional loading animation
- Clear messaging about AI analysis
- Automatic transition to feedback view
- Fallback timeout to prevent stuck states

### 4. Feedback Display
- Comprehensive scoring across three dimensions
- Color-coded performance indicators
- Actionable improvement tips
- Debug transcript for verification
- **NEW**: STAR Method Analysis with categorized breakdown
- **NEW**: Visual STAR component grid with color coding
- **NEW**: Reset button for new interview sessions

## Technical Implementation Details

### State Management
- React hooks for local state management
- Props for component communication
- No external state management library required

### API Communication
- **Primary**: Comprehensive analysis endpoint for combined scoring and STAR
- **Fallback**: Basic scoring endpoint for error recovery
- JSON data format for request/response
- Error handling with graceful degradation
- **NEW**: Dual endpoint strategy for reliability

### Browser Compatibility
- Modern browser support required
- Web Speech API dependency
- MediaDevices API for camera/microphone
- Fallback handling for unsupported features
- **NEW**: CSS Grid support for STAR layout

### Performance Considerations
- Automatic cleanup of media streams
- Efficient re-rendering with React hooks
- Optimized CSS animations
- Minimal bundle size with standard React
- **NEW**: Conditional STAR rendering based on data availability
- **PRODUCTION READY**: Minimal console logging for optimal performance

### Production Readiness
- **CLEAN CODE**: Removed all unnecessary console logs
- **ERROR HANDLING**: Only essential error logging preserved
- **RESOURCE CLEANUP**: Proper cleanup of timeouts and media streams
- **FALLBACK MECHANISMS**: Robust error recovery strategies
- **PERFORMANCE OPTIMIZED**: Minimal overhead from debugging code

## Development Setup

### Prerequisites
- Node.js and npm installed
- Modern browser with Web Speech API support
- Backend server running on port 8000 with Mistral AI integration

### Installation and Running
```bash
cd mockly-frontend
npm install
npm start
```

### Development Features
- Hot reloading with React Scripts
- Development server on port 3000
- Browser developer tools integration
- Debug transcript display for testing
- **PRODUCTION READY**: Clean console output for deployment

## Current Limitations and Future Enhancements

### Current Limitations
- **UPDATED**: Fixed 10-second session duration (increased from 5 seconds)
- Browser-dependent speech recognition
- Mock metrics for voice and face analysis
- Basic error handling
- **UPDATED**: Now includes real AI-powered content scoring and STAR analysis

### Planned Improvements
- Customizable session duration
- Enhanced speech recognition accuracy
- Real-time facial expression analysis
- Session recording and playback
- Multiple interview scenarios
- User authentication and progress tracking
- Advanced analytics dashboard
- Mobile-responsive design improvements
- **NEW**: STAR analysis export functionality
- **NEW**: Historical STAR performance tracking
- **NEW**: Customizable STAR evaluation criteria

## API Integration Details

### Comprehensive Analysis Endpoint
- **URL**: `POST /comprehensive-analysis`
- **Request**: `{ metrics, transcript }`
- **Response**: `{ content_score, voice_score, face_score, tips, transcript_debug, star_analysis }`
- **Features**: Combined scoring and STAR analysis in single request

### STAR Analysis Data Structure
```javascript
{
  star_analysis: {
    situation: ["Context sentences..."],
    task: ["Objective sentences..."],
    action: ["Action sentences..."],
    result: ["Outcome sentences..."]
  }
}
```

### Error Handling Strategy
1. **Primary**: Comprehensive analysis endpoint
2. **Fallback**: Basic scoring endpoint
3. **Final**: Default response with error message
4. **PRODUCTION READY**: Minimal console logging for critical errors only

## File Structure
```
mockly-frontend/
├── src/
│   ├── App.js              # Main React component
│   ├── index.js            # React entry point
│   ├── components/         # React components
│   │   ├── InterviewSession.js    # Updated with comprehensive API
│   │   ├── VideoAudioProcessor.js # Core recording component (10s duration)
│   │   └── FeedbackReport.js      # Enhanced with STAR display
│   └── theme.css           # Updated styling with STAR components
├── public/
│   └── index.html          # HTML template
├── package.json            # Dependencies and scripts
└── README.md              # Setup instructions
```

## Production Deployment Notes

### Code Quality
- **CLEANED**: Removed all unnecessary console.log statements
- **OPTIMIZED**: Only essential error logging preserved
- **READY**: Code is production-ready for mainline deployment

### Performance Optimizations
- Minimal console overhead
- Efficient resource cleanup
- Optimized re-rendering
- Streamlined API communication

### Error Logging Strategy
- **Speech Recognition Errors**: Critical for debugging audio issues
- **Media Capture Errors**: Essential for camera/microphone problems
- **API Communication Errors**: Important for backend connectivity
- **Fallback Errors**: Critical for system reliability

This documentation provides comprehensive coverage of the updated Mockly frontend with STAR analysis integration, enhanced API communication, improved user experience, and production-ready code quality. 